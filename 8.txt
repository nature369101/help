#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>

int main() {
    DIR *dir;
    struct dirent *entry;

    // Open the current directory
    dir = opendir(".");
    if (dir == NULL) {
        perror("Unable to open directory");
        return EXIT_FAILURE;
    }

    // Read and print each directory entry
    while ((entry = readdir(dir)) != NULL) {
        printf("%s\n", entry->d_name);
    }

    // Close the directory
    closedir(dir);

    return EXIT_SUCCESS;
}


#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/types.h>
#include<sys/wait.h>
#include<sys/shm.h>
#include<sys/ipc.h>
#include<sys/stat.h>
#include<sys/mman.h>
#include<fcntl.h>
#include<string.h>

int main(int argc,char*argv[])
{
	int i;
	int k,n1,n2,n3;
	const int size = 4096;
	int shmid;
	void*ptr;
	if(argc>1)
	{
		sscanf(argv[1],"%d",&i);
		if(i<1){
		printf("error input .. plzz try again\n");
		return 0;
		}
	}
	else
	{
		printf("error not passing n in commands\n");
		exit(0);
	}
	pid_t pid = fork();
	if(pid == 0)
	{
		printf("enter the child process\n");
		execlp("./fibchild","fibchild",argv[1],NULL);
	}
	else if(pid>0)
	{
		wait(NULL);
		printf("entered parent process,after the completion of child\n");
		shmid = shm_open("VSS",O_RDONLY,0666);
		ptr = mmap(0,size,PROT_READ,MAP_SHARED,shmid,0);
		printf("parent printing\n");
		printf("%s",(char*)ptr);
		shm_unlink("VSS");
		
	}
	return 0;	
}

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/types.h>
#include<sys/ipc.h>
#include<sys/wait.h>
#include<sys/stat.h>
#include<sys/shm.h>
#include<sys/mman.h>
#include<string.h>
#include<fcntl.h>

int main(int argc,char*argv[])
{
	int k=2,n1 = 0,n2 = 1,n3;
	void*ptr;
	int shmid = shm_open("VSS",O_CREAT|O_RDWR,0666);
	ftruncate(shmid,4096);
	ptr = mmap(0,4096,PROT_WRITE,MAP_SHARED,shmid,0);
	printf("child:\n");
	int i = atoi(argv[1]);
	sprintf(ptr,"%d",n1);
	ptr+=strlen(ptr);
	printf("%d\n",n1);
	sprintf(ptr,"%d",n2);
	ptr+=strlen(ptr);
	printf("%d\n",n2);
	while(k!=i)
	{
		n3 = n1+n2;
		sprintf(ptr,"%d",n3);
		ptr += strlen(ptr);
		printf("%d\n",n3);
		n1 = n2;
		n2 = n3;
		k++;
	}
}