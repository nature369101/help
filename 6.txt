// ---- zombie.c ---- //
#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
int main() {
pid_t child_pid, my_pid, parent_pid;
int i = 10;
child_pid = fork();
if (child_pid < 0) {
printf("Fork failed. Exiting!\n");
exit(0);
}
if (child_pid == 0) {
// Child process
printf("[CHILD] This is the child process.\n");
my_pid = getpid();
parent_pid = getppid();
printf("[CHILD] My pid is %d\n", my_pid);
printf("[CHILD] My parent's pid is %d\n", parent_pid);
printf("[CHILD] Exiting.\n");
exit(0);
} 
else {
// Parent process
printf("[PARENT] This is the parent process.\n");
my_pid = getpid();
parent_pid = getppid();
printf("[PARENT] My pid is %d\n", my_pid);
printf("[PARENT] My parent's pid is %d\n", parent_pid);
printf("[PARENT] Sleeping for 10 seconds.\n");
sleep(10);
printf("[PARENT] Child pid = %d has ended, but it has an entry in process table. \n"
"[PARENT] It is a zombie process.\n", child_pid);
}
return 0;
}
Output:
[PARENT] This is the parent process.
[CHILD] This is the child process.
[PARENT] My pid is 578
[PARENT] My parent's pid is 40
[PARENT] Sleeping for 10 seconds.
[CHILD] My pid is 579
[CHILD] My parent's pid is 578
[CHILD] Exiting.
[PARENT] Child pid = 579 has ended, but it has an entry in process table.
[PARENT] It is a zombie process.


// ---- orphan.c ---- //
#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
int main() {
pid_t child_pid, my_pid, parent_pid;
int i = 10;
child_pid = fork();
if (child_pid < 0) {
printf("Fork failed. Exiting!\n");
exit(0);
}
if (child_pid == 0) {
// Child process
printf("[CHILD] This is the child process.\n");
my_pid = getpid();
parent_pid = getppid();
printf("[CHILD] My pid is %d\n", my_pid);
printf("[CHILD] My parent's pid is %d\n", parent_pid);
printf("[CHILD] Sleeping for 10 seconds.\n");
sleep(10);
printf("[CHILD] My parent ended. So I am an orphan process adopted by init process.\n");
} else {
// Parent process
printf("[PARENT] This is the parent process.\n");
my_pid = getpid();
parent_pid = getppid();
printf("[PARENT] My pid is %d\n", my_pid);
printf("[PARENT] My parent's pid is %d\n", parent_pid);
printf("[PARENT] Exiting.\n");
exit(0);
}
return 0;
}
Output:
[PARENT] This is the parent process.
[PARENT] My pid is 624
[PARENT] My parent's pid is 40
[PARENT] Exiting.
[CHILD] This is the child process.
[CHILD] My pid is 625
[CHILD] My parent's pid is 624
[CHILD] Sleeping for 10 seconds.


#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>

typedef struct{
     int pid, ct, at, bt, wt, tat;
}process;

typedef struct{
     int pid, et, st;
}gantt;



void sjfnonpre(process *proc, int n, gantt* ganttchart, int* ganttsize){
  int completed=0,minbt=1000,currentTime=0;
  bool *visited=(bool*)malloc(n*sizeof(bool));
  for(int i=0;i<n;i++){
     visited[i]=false;
  }
  while(completed!=n){
     int minIndex=-1,minbt=1000;
     for(int i=0;i<n;i++){
          if(proc[i].at<=currentTime && !visited[i] && proc[i].bt< minbt){
               minIndex=i;
               minbt=proc[i].bt;
          }
     }

     if(minIndex==-1){
          currentTime++;
          continue;
     }

     ganttchart[*ganttsize].st=currentTime;
     ganttchart[*ganttsize].pid=proc[minIndex].pid;

     currentTime+=proc[minIndex].bt;
     proc[minIndex].ct=currentTime;
     proc[minIndex].tat=proc[minIndex].ct-proc[minIndex].at;
     proc[minIndex].wt=proc[minIndex].tat-proc[minIndex].bt;
     completed++;
     visited[minIndex]=true;
     ganttchart[*ganttsize].et=currentTime;
     (*ganttsize)++;
  }

}

int main(){
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    process proc[n];
    gantt ganttchart[100];
    int ganttsize=0;

    for (int i = 0; i < n; i++) {
        printf("Enter the arrival time and burst time for process %d: ", i + 1);
        scanf("%d%d", &proc[i].at, &proc[i].bt);
        proc[i].pid = i + 1;
    }

    sjfnonpre(proc, n, ganttchart, &ganttsize);

    printf("Gantt Chart:\n");
    for (int i = 0; i < ganttsize; i++) {
        printf("|(%d) p%d (%d)|", ganttchart[i].st, ganttchart[i].pid, ganttchart[i].et);
    }
    printf("\n\nProcess details:\n");
    printf("PID\tAT\tBT\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t%d\n", proc[i].pid, proc[i].at, proc[i].bt, proc[i].ct, proc[i].tat, proc[i].wt);
    }

    return 0;
}