#!/bin/bash

# Function to check if a string is a palindrome
is_palindrome() {
  local str="$1"
  local len=${#str}
  local mid=$((len / 2))
  local i

  for ((i = 0; i < mid; i++)); do
    if [ "${str:i:1}" != "${str:len-i-1:1}" ]; then
      return 1
    fi
  done
  return 0
}

# Read input from the user
read -p "Enter a string: " input

# Check if the input string is a palindrome
if is_palindrome "$input"; then
  echo "\"$input\" is a palindrome."
else
  echo "\"$input\" is not a palindrome."
fi


#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <unistd.h>
#include <sys/wait.h>  

typedef struct{
	int n;
	int arr[100];
}pack_t;

int main() {
    key_t key=1234;
    int shmid=shmget(key,sizeof(pack_t),0666 | IPC_CREAT);
    pack_t *shm_ptr = (pack_t*)shmat(shmid,NULL,0666);
    printf("[PARENT] created memory with key=%d,id=%d,address=%p\n",key,shmid,shm_ptr);
    printf("[PARENT] enter n:");
    scanf("%d",&shm_ptr->n);
    pid_t child_pid;
    if((child_pid = fork())==0){
    	execlp("./odd_child", "./odd_child", NULL);

    }else{
    	wait(NULL);
    	printf("[CHILD] FNISHED EXECUTION\n");
    	printf("[CHILD]THE FIRST %d ODD NUMBERS ARE:",shm_ptr->n);
    	for(int i=0;i<shm_ptr->n;i++){
    		printf("%d",shm_ptr->arr[i]);
    	}putchar('\n');
    }
    shmdt((void *)shm_ptr);
    shmctl(shmid,IPC_RMID,NULL);
    printf("[PARENT] shared memory deteled\n");
    return 0;
}


#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>

typedef struct {
    int n;
    int arr[100]; // Assuming a maximum of 100 odd numbers
} pack_t;

int main() {
    key_t key = 1234;
    int shmid = shmget(key, sizeof(pack_t), 0666);
    pack_t *shm_ptr = (pack_t*)shmat(shmid, NULL, 0666);
    printf("[CHILD] attached to shared memory with key=%d,id=%d,address=%p\n",key,shmid,shm_ptr);
    for (int i = 0; i< shm_ptr->n; i++) {
        shm_ptr->arr[i] = 2*i+1;
    }
    printf("[CHILD]finished generating first %d odd numbers\n",shm_ptr->n);
    shmdt(shm_ptr) == -1;
    return 0;
    
    
    
 
    
}